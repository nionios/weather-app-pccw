// Need to use the React-specific entry point to import `createApi`
import {createApi, fetchBaseQuery} from "@reduxjs/toolkit/query/react";

// Setup the type for the API response.
interface Location {
    name: string;
    region: string;
    country: string;
    lat: number;
    lon: number;
    tz_id: string;
    localtime_epoch: number;
    localtime: string;
}

interface Condition {
    text: string;
    icon: string;
    code: number;
}

interface Current {
    last_updated_epoch: number;
    last_updated: string;
    temp_c: number;
    temp_f: number;
    is_day: number;
    condition: Condition;
    wind_mph: number;
    wind_kph: number;
    wind_degree: number;
    wind_dir: string;
    pressure_mb: number;
    pressure_in: number;
    precip_mm: number;
    precip_in: number;
    humidity: number;
    cloud: number;
    feelslike_c: number;
    feelslike_f: number;
    windchill_c: number;
    windchill_f: number;
    heatindex_c: number;
    heatindex_f: number;
    dewpoint_c: number;
    dewpoint_f: number;
    vis_km: number;
    vis_miles: number;
    uv: number;
    gust_mph: number;
    gust_kph: number;
}

interface WeatherData<TLocation, TCurrent> {
    location: TLocation;
    current: TCurrent;
}

type WeatherApiResponse = WeatherData<Location, Current>;

// Define a service using a base URL and expected endpoints
export const weatherApiSlice = createApi({
    // Inject the API for env variable to the process endpoint
    baseQuery: fetchBaseQuery({baseUrl: `http://api.weatherapi.com/v1/current.json`}),
    reducerPath: "weatherApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Weather"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getWeatherInfo: build.query<WeatherApiResponse, number>({
            query: (location = "Athens") => `?key=${process.env.weatherApiKey}&q=${location}`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{type: "Weather", id}],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const {useGetWeatherInfoQuery} = weatherApiSlice;
